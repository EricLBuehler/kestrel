fn main: std::void {
    program.ke:2
    .0:   declare x['1 .0 => .5]
    .1:   i32 123 -> std::i32['2 .1 => .3]
    .2:   own .1
    .3:   store x .1 -> std::void['3 .3 => .3]
    program.ke:3
    .4:   declare y['4 .4 => .11]
    .5:   load x -> std::i32['5 .5 => .6]  dropbinding x
    .6:   copy .5 -> std::i32['6 .6 => .7]
    .7:   ref .6 -> &std::i32['8 .7 => .9]
    .8:   own .7
    .9:   store y .7 -> std::void['9 .9 => .9]
    program.ke:4
    .10:  declare z['10 .10 => .14]
    .11:  load y -> &std::i32['11 .11 => .12]  dropbinding y
    .12:  deref .11 -> std::i32['12 .12 => .14]
    .13:  own .12
    .14:  store z .12 -> std::void['13 .14 => .14]  dropbinding z
    program.ke:6
    .15:  i32 1 -> std::i32['14 .15 => .17]
    .16:  i32 1 -> std::i32['15 .16 => .17]
    .17:  eq .15 .16 -> std::bool['16 .17 => .18]
    .18:  ifcondition #0 .17 {
        program.ke:7
        .0:   declare a['1 .0 => .3]
        .1:   i32 100 -> std::i32['static]
        .2:   own .1
        .3:   store a .1 -> std::void['static]
    } -> std::void['17 .18 => .18]

    & ref .7 ['7 .7 => .11]
}